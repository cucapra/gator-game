{"version":3,"file":"index.umd.js","sources":["../src/status/index.ts","../src/errors/HTTPError.ts","../src/errors/ClientError.ts","../src/errors/ServerError.ts","../src/errors/client/BadRequestError.ts","../src/errors/client/UnauthorizedError.ts","../src/errors/client/PaymentRequiredError.ts","../src/errors/client/ForbiddenError.ts","../src/errors/client/NotFoundError.ts","../src/errors/client/MethodNotAllowedError.ts","../src/errors/client/NotAcceptableError.ts","../src/errors/client/ProxyAuthenticationRequiredError.ts","../src/errors/client/RequestTimeoutError.ts","../src/errors/client/ConflictError.ts","../src/errors/client/GoneError.ts","../src/errors/client/LengthRequiredError.ts","../src/errors/client/PreconditionFailedError.ts","../src/errors/client/PayloadTooLargeError.ts","../src/errors/client/URITooLongError.ts","../src/errors/client/UnsupportedMediaTypeError.ts","../src/errors/client/RangeNotSatisfiableError.ts","../src/errors/client/ExpectationFailedError.ts","../src/errors/client/ImATeapotError.ts","../src/errors/client/MisdirectedRequestError.ts","../src/errors/client/UnprocessableEntityError.ts","../src/errors/client/LockedError.ts","../src/errors/client/FailedDependencyError.ts","../src/errors/client/UnorderedCollectionError.ts","../src/errors/client/UpgradeRequiredError.ts","../src/errors/client/PreconditionRequiredError.ts","../src/errors/client/TooManyRequestsError.ts","../src/errors/client/RequestHeaderFieldsTooLargeError.ts","../src/errors/client/UnavailableForLegalReasonsError.ts","../src/errors/server/InternalServerError.ts","../src/errors/server/NotImplementedError.ts","../src/errors/server/BadGatewayError.ts","../src/errors/server/ServiceUnavailableError.ts","../src/errors/server/GatewayTimeoutError.ts","../src/errors/server/HTTPVersionNotSupportedError.ts","../src/errors/server/VariantAlsoNegotiatesError.ts","../src/errors/server/InsufficientStorageError.ts","../src/errors/server/LoopDetectedError.ts","../src/errors/server/BandwidthLimitExceededError.ts","../src/errors/server/NotExtendedError.ts","../src/errors/server/NetworkAuthenticationRequiredError.ts","../src/index.ts"],"sourcesContent":["import http from 'http';\n\nenum StatusType {\n  INFO = '1',\n  SUCCESS = '2',\n  REDIRECT = '3',\n  CLIENTERROR = '4',\n  SERVERERROR = '5',\n}\n\nexport type StatusCode = string | number;\n\nexport interface StatusCodeMap {\n  [key: number]: string;\n  [key: string]: StatusCode;\n}\n\nexport class Status {\n  CONTINUE = 100;\n\n  SWITCHING_PROTOCOLS = 101;\n\n  PROCESSING = 102;\n\n  EARLY_HINTS = 103;\n\n  OK = 200;\n\n  CREATED = 201;\n\n  ACCEPTED = 202;\n\n  NON_AUTHORITATIVE_INFORMATION = 203;\n\n  NO_CONTENT = 204;\n\n  RESET_CONTENT = 205;\n\n  PARTIAL_CONTENT = 206;\n\n  MULTI_STATUS= 207;\n\n  ALREADY_REPORTED = 208;\n\n  IM_USED = 226;\n\n  MULTIPLE_CHOICES = 300;\n\n  MOVED_PERMANENTLY = 301;\n\n  FOUND = 302;\n\n  SEE_OTHER = 303;\n\n  NOT_MODIFIED = 304;\n\n  USE_PROXY = 305;\n\n  TEMPORARY_REDIRECT = 307;\n\n  PERMANENT_REDIRECT = 308;\n\n  BAD_REQUEST = 400;\n\n  UNAUTHORIZED = 401;\n\n  PAYMENT_REQUIRED = 402;\n\n  FORBIDDEN = 403;\n\n  NOT_FOUND = 404;\n\n  METHOD_NOT_ALLOWED = 405;\n\n  NOT_ACCEPTABLE = 406;\n\n  PROXY_AUTHENTICATION_REQUIRED = 407;\n\n  REQUEST_TIMEOUT = 408;\n\n  CONFLICT = 409;\n\n  GONE = 410;\n\n  LENGTH_REQUIRED = 411;\n\n  PRECONDITION_FAILED = 412;\n\n  PAYLOAD_TOO_LARGE = 413;\n\n  URI_TOO_LONG = 414;\n\n  UNSUPPORTED_MEDIA_TYPE = 415;\n\n  RANGE_NOT_SATISFIABLE = 416;\n\n  EXPECTATION_FAILED = 417;\n\n  IM_A_TEAPOT = 418;\n\n  MISDIRECTED_REQUEST = 421;\n\n  UNPROCESSABLE_ENTITY = 422;\n\n  LOCKED = 423;\n\n  FAILED_DEPENDENCY = 424;\n\n  UNORDERED_COLLECTION = 425;\n\n  UPGRADE_REQUIRED = 426;\n\n  PRECONDITION_REQUIRED = 428;\n\n  TOO_MANY_REQUESTS = 429;\n\n  REQUEST_HEADER_FIELDS_TOO_LARGE = 431;\n\n  UNAVAILABLE_FOR_LEGAL_REASONS = 451;\n\n  INTERNAL_SERVER_ERROR = 500;\n\n  NOT_IMPLEMENTED = 501;\n\n  BAD_GATEWAY = 502;\n\n  SERVICE_UNAVAILABLE = 503;\n\n  GATEWAY_TIMEOUT = 504;\n\n  HTTP_VERSION_NOT_SUPPORTED = 505;\n\n  VARIANT_ALSO_NEGOTIATES = 506;\n\n  INSUFFICIENT_STORAGE = 507;\n\n  LOOP_DETECTED = 508;\n\n  BANDWIDTH_LIMIT_EXCEEDED = 509;\n\n  NOT_EXTENDED = 510;\n\n  NETWORK_AUTHENTICATION_REQUIRED = 511;\n\n  STATUS_CODES = http.STATUS_CODES;\n\n  codes: StatusCodeMap;\n\n  statusCodes: number[];\n\n  constructor() {\n    const map = {};\n\n    this.statusCodes = ((obj: StatusCodeMap): number[] => {\n      const list: number[] = [];\n\n      Object.keys(http.STATUS_CODES).forEach((code: string): void => {\n        const message = http.STATUS_CODES[code];\n        const num = Number.parseInt(code);\n\n        if (message) {\n          obj[message] = num;\n          obj[message.toLowerCase()] = num;\n          obj[message.toUpperCase()] = num;\n          obj[num] = message;\n          obj[code] = message;\n        }\n\n        list.push(num);\n      });\n\n      return list;\n    })(map);\n\n    this.codes = map;\n  }\n\n  code(input: StatusCode): StatusCode {\n    if (typeof input === 'number') {\n      if (this.codes[input]) return input;\n\n      throw new Error(`Invalid status code ${input}`);\n    } else if (typeof input === 'string') {\n      if (isNaN(Number.parseInt(input))) {\n        const code = this.codes[input.toLowerCase()];\n\n        if (code) return code;\n\n        throw new Error(`Invalid status message ${input}`);\n      }\n\n      return this.code(Number.parseInt(input));\n    }\n\n    throw new Error('Input must be a number or string');\n  }\n\n  isInfo(input: StatusCode): boolean {\n    return this.is(StatusType.INFO, input);\n  }\n\n  isSuccess(input: StatusCode): boolean {\n    return this.is(StatusType.SUCCESS, input);\n  }\n\n  isRedirect(input: StatusCode): boolean {\n    return this.is(StatusType.REDIRECT, input);\n  }\n\n  isClientError(input: StatusCode): boolean {\n    return this.is(StatusType.CLIENTERROR, input);\n  }\n\n  isServerError(input: StatusCode): boolean {\n    return this.is(StatusType.SERVERERROR, input);\n  }\n\n  isError(input: StatusCode): boolean {\n    return this.isClientError(input) || this.isServerError(input);\n  }\n\n  private is(type: StatusType, input: StatusCode): boolean {\n    return this.statusCodes.includes(Number.parseInt(input.toString())) && String(input).charAt(0) === type;\n  }\n}\n\nexport default new Status();\n","import status from '../status';\n\nclass HTTPError extends Error {\n  name: string;\n\n  code: number;\n\n  status: number;\n\n  expose: boolean;\n\n  data?: any;\n\n  reservedKeys: string[] = [ 'expose', 'status', 'statusCode', 'name', 'message' ];\n\n  constructor(code: number, message: string, options: ErrorOptions = { expose: false }) {\n    super(message);\n    this.name = this.constructor.name;\n\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.code = code;\n    this.status = code;\n    this.expose = options.expose;\n\n    if (!status.isError(code)) throw new Error(`Invalid status code ${code} = must be 4xx or 5xx`);\n\n    if (options.data) this.data = options.data;\n  }\n}\n\nexport interface ErrorOptions {\n  expose: boolean;\n  data?: any;\n}\n\nexport default HTTPError;\n","import status from '../status';\n\nimport HTTPError, { ErrorOptions } from './HTTPError';\n\nclass ClientError extends HTTPError {\n  constructor(code: number, message: string, options: ErrorOptions = { expose: true }) {\n    super(code, message, options);\n\n    if (!status.isClientError(code)) throw new Error(`Invalid status code ${code} - must be 4xx`);\n  }\n}\n\nexport default ClientError;\n","import status from '../status';\n\nimport HTTPError, { ErrorOptions } from './HTTPError';\n\nclass ServerError extends HTTPError {\n  constructor(code: number, message: string, options: ErrorOptions) {\n    super(code, message, options);\n\n    if (!status.isServerError(code)) throw new Error(`Invalid status code ${code} - must be 5xx`);\n  }\n}\n\nexport default ServerError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass BadRequestError extends ClientError {\n  constructor(message: string = status.codes[status.BAD_REQUEST], options: ErrorOptions = { expose: true }) {\n    super(status.BAD_REQUEST, message, options);\n  }\n}\n\nexport default BadRequestError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass UnauthorizedError extends ClientError {\n  constructor(message: string = status.codes[status.UNAUTHORIZED], options: ErrorOptions = { expose: true }) {\n    super(status.UNAUTHORIZED, message, options);\n  }\n}\n\nexport default UnauthorizedError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass PaymentRequiredError extends ClientError {\n  constructor(message: string = status.codes[status.PAYMENT_REQUIRED], options: ErrorOptions = { expose: true }) {\n    super(status.PAYMENT_REQUIRED, message, options);\n  }\n}\n\nexport default PaymentRequiredError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass ForbiddenError extends ClientError {\n  constructor(message: string = status.codes[status.FORBIDDEN], options: ErrorOptions = { expose: true }) {\n    super(status.FORBIDDEN, message, options);\n  }\n}\n\nexport default ForbiddenError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass NotFoundError extends ClientError {\n  constructor(message: string = status.codes[status.NOT_FOUND], options: ErrorOptions = { expose: true }) {\n    super(status.NOT_FOUND, message, options);\n  }\n}\n\nexport default NotFoundError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass MethodNotAllowedError extends ClientError {\n  constructor(message: string = status.codes[status.METHOD_NOT_ALLOWED], options: ErrorOptions = { expose: true }) {\n    super(status.METHOD_NOT_ALLOWED, message, options);\n  }\n}\n\nexport default MethodNotAllowedError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass NotAcceptableError extends ClientError {\n  constructor(message: string = status.codes[status.NOT_ACCEPTABLE], options: ErrorOptions = { expose: true }) {\n    super(status.NOT_ACCEPTABLE, message, options);\n  }\n}\n\nexport default NotAcceptableError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass ProxyAuthenticationRequiredError extends ClientError {\n  constructor(\n    message: string = status.codes[status.PROXY_AUTHENTICATION_REQUIRED],\n    options: ErrorOptions = { expose: true }\n  ) {\n    super(status.PROXY_AUTHENTICATION_REQUIRED, message, options);\n  }\n}\n\nexport default ProxyAuthenticationRequiredError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass RequestTimeoutError extends ClientError {\n  constructor(message: string = status.codes[status.REQUEST_TIMEOUT], options: ErrorOptions = { expose: true }) {\n    super(status.REQUEST_TIMEOUT, message, options);\n  }\n}\n\nexport default RequestTimeoutError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass ConflictError extends ClientError {\n  constructor(message: string = status.codes[status.CONFLICT], options: ErrorOptions = { expose: true }) {\n    super(status.CONFLICT, message, options);\n  }\n}\n\nexport default ConflictError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass GoneError extends ClientError {\n  constructor(message: string = status.codes[status.GONE], options: ErrorOptions = { expose: true }) {\n    super(status.GONE, message, options);\n  }\n}\n\nexport default GoneError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass LengthRequiredError extends ClientError {\n  constructor(message: string = status.codes[status.LENGTH_REQUIRED], options: ErrorOptions = { expose: true }) {\n    super(status.LENGTH_REQUIRED, message, options);\n  }\n}\n\nexport default LengthRequiredError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass PreconditionFailedError extends ClientError {\n  constructor(message: string = status.codes[status.PRECONDITION_FAILED], options: ErrorOptions = { expose: true }) {\n    super(status.PRECONDITION_FAILED, message, options);\n  }\n}\n\nexport default PreconditionFailedError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass PayloadTooLargeError extends ClientError {\n  constructor(message: string = status.codes[status.PAYLOAD_TOO_LARGE], options: ErrorOptions = { expose: true }) {\n    super(status.PAYLOAD_TOO_LARGE, message, options);\n  }\n}\n\nexport default PayloadTooLargeError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass URITooLargeError extends ClientError {\n  constructor(message: string = status.codes[status.URI_TOO_LONG], options: ErrorOptions = { expose: true }) {\n    super(status.URI_TOO_LONG, message, options);\n  }\n}\n\nexport default URITooLargeError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass UnsupportedMediaTypeError extends ClientError {\n  constructor(message: string = status.codes[status.UNSUPPORTED_MEDIA_TYPE], options: ErrorOptions = { expose: true }) {\n    super(status.UNSUPPORTED_MEDIA_TYPE, message, options);\n  }\n}\n\nexport default UnsupportedMediaTypeError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass RangeNotSatisfiableError extends ClientError {\n  constructor(message: string = status.codes[status.RANGE_NOT_SATISFIABLE], options: ErrorOptions = { expose: true }) {\n    super(status.RANGE_NOT_SATISFIABLE, message, options);\n  }\n}\n\nexport default RangeNotSatisfiableError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass ExpectationFailedError extends ClientError {\n  constructor(message: string = status.codes[status.EXPECTATION_FAILED], options: ErrorOptions = { expose: true }) {\n    super(status.EXPECTATION_FAILED, message, options);\n  }\n}\n\nexport default ExpectationFailedError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass ImATeapotError extends ClientError {\n  constructor(message: string = status.codes[status.IM_A_TEAPOT], options: ErrorOptions = { expose: true }) {\n    super(status.IM_A_TEAPOT, message, options);\n  }\n}\n\nexport default ImATeapotError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass MisdirectedRequestError extends ClientError {\n  constructor(message: string = status.codes[status.MISDIRECTED_REQUEST], options: ErrorOptions = { expose: true }) {\n    super(status.MISDIRECTED_REQUEST, message, options);\n  }\n}\n\nexport default MisdirectedRequestError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass UnprocessableEntityError extends ClientError {\n  constructor(message: string = status.codes[status.UNPROCESSABLE_ENTITY], options: ErrorOptions = { expose: true }) {\n    super(status.UNPROCESSABLE_ENTITY, message, options);\n  }\n}\n\nexport default UnprocessableEntityError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass LockedError extends ClientError {\n  constructor(message: string = status.codes[status.LOCKED], options: ErrorOptions = { expose: true }) {\n    super(status.LOCKED, message, options);\n  }\n}\n\nexport default LockedError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass FailedDependencyError extends ClientError {\n  constructor(message: string = status.codes[status.FAILED_DEPENDENCY], options: ErrorOptions = { expose: true }) {\n    super(status.FAILED_DEPENDENCY, message, options);\n  }\n}\n\nexport default FailedDependencyError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass UnorderedCollectionError extends ClientError {\n  constructor(message: string = status.codes[status.UNORDERED_COLLECTION], options: ErrorOptions = { expose: true }) {\n    super(status.UNORDERED_COLLECTION, message, options);\n  }\n}\n\nexport default UnorderedCollectionError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass UpgradeRequiredError extends ClientError {\n  constructor(message: string = status.codes[status.UPGRADE_REQUIRED], options: ErrorOptions = { expose: true }) {\n    super(status.UPGRADE_REQUIRED, message, options);\n  }\n}\n\nexport default UpgradeRequiredError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass PreconditionRequiredError extends ClientError {\n  constructor(message: string = status.codes[status.PRECONDITION_REQUIRED], options: ErrorOptions = { expose: true }) {\n    super(status.PRECONDITION_REQUIRED, message, options);\n  }\n}\n\nexport default PreconditionRequiredError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass TooManyRequestsError extends ClientError {\n  constructor(message: string = status.codes[status.TOO_MANY_REQUESTS], options: ErrorOptions = { expose: true }) {\n    super(status.TOO_MANY_REQUESTS, message, options);\n  }\n}\n\nexport default TooManyRequestsError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass RequestHeaderFieldsTooLargeError extends ClientError {\n  constructor(\n    message: string = status.codes[status.REQUEST_HEADER_FIELDS_TOO_LARGE],\n    options: ErrorOptions = { expose: true }\n  ) {\n    super(status.REQUEST_HEADER_FIELDS_TOO_LARGE, message, options);\n  }\n}\n\nexport default RequestHeaderFieldsTooLargeError;\n","import status from '../../status';\nimport ClientError from '../ClientError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass UnavailableForLegalReasonsError extends ClientError {\n  constructor(\n    message: string = status.codes[status.UNAVAILABLE_FOR_LEGAL_REASONS],\n    options: ErrorOptions = { expose: true }\n  ) {\n    super(status.UNAVAILABLE_FOR_LEGAL_REASONS, message, options);\n  }\n}\n\nexport default UnavailableForLegalReasonsError;\n","import status from '../../status';\nimport ServerError from '../ServerError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass InternalServerError extends ServerError {\n  constructor(message: string = status.codes[status.INTERNAL_SERVER_ERROR], options: ErrorOptions = { expose: false }) {\n    super(status.INTERNAL_SERVER_ERROR, message, options);\n  }\n}\n\nexport default InternalServerError;\n","import status from '../../status';\nimport ServerError from '../ServerError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass NotImplementedError extends ServerError {\n  constructor(message: string = status.codes[status.NOT_IMPLEMENTED], options: ErrorOptions = { expose: false }) {\n    super(status.NOT_IMPLEMENTED, message, options);\n  }\n}\n\nexport default NotImplementedError;\n","import status from '../../status';\nimport ServerError from '../ServerError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass BadGatewayError extends ServerError {\n  constructor(message: string = status.codes[status.BAD_GATEWAY], options: ErrorOptions = { expose: false }) {\n    super(status.BAD_GATEWAY, message, options);\n  }\n}\n\nexport default BadGatewayError;\n","import status from '../../status';\nimport ServerError from '../ServerError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass ServiceUnavailableError extends ServerError {\n  constructor(message: string = status.codes[status.SERVICE_UNAVAILABLE], options: ErrorOptions = { expose: false }) {\n    super(status.SERVICE_UNAVAILABLE, message, options);\n  }\n}\n\nexport default ServiceUnavailableError;\n","import status from '../../status';\nimport ServerError from '../ServerError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass GatewayTimeoutError extends ServerError {\n  constructor(message: string = status.codes[status.GATEWAY_TIMEOUT], options: ErrorOptions = { expose: false }) {\n    super(status.GATEWAY_TIMEOUT, message, options);\n  }\n}\n\nexport default GatewayTimeoutError;\n","import status from '../../status';\nimport ServerError from '../ServerError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass HTTPVersionNotSupportedError extends ServerError {\n  constructor(\n    message: string = status.codes[status.HTTP_VERSION_NOT_SUPPORTED],\n    options: ErrorOptions = { expose: false }\n  ) {\n    super(status.HTTP_VERSION_NOT_SUPPORTED, message, options);\n  }\n}\n\nexport default HTTPVersionNotSupportedError;\n","import status from '../../status';\nimport ServerError from '../ServerError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass VariantAlsoNegotiatesError extends ServerError {\n  constructor(\n    message: string = status.codes[status.VARIANT_ALSO_NEGOTIATES],\n    options: ErrorOptions = { expose: false }\n  ) {\n    super(status.VARIANT_ALSO_NEGOTIATES, message, options);\n  }\n}\n\nexport default VariantAlsoNegotiatesError;\n","import status from '../../status';\nimport ServerError from '../ServerError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass InsufficientStorageError extends ServerError {\n  constructor(message: string = status.codes[status.INSUFFICIENT_STORAGE], options: ErrorOptions = { expose: false }) {\n    super(status.INSUFFICIENT_STORAGE, message, options);\n  }\n}\n\nexport default InsufficientStorageError;\n","import status from '../../status';\nimport ServerError from '../ServerError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass LoopDetectedError extends ServerError {\n  constructor(message: string = status.codes[status.LOOP_DETECTED], options: ErrorOptions = { expose: false }) {\n    super(status.LOOP_DETECTED, message, options);\n  }\n}\n\nexport default LoopDetectedError;\n","import status from '../../status';\nimport ServerError from '../ServerError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass BandwidthLimitExceededError extends ServerError {\n  constructor(\n    message: string = status.codes[status.BANDWIDTH_LIMIT_EXCEEDED],\n    options: ErrorOptions = { expose: false }\n  ) {\n    super(status.BANDWIDTH_LIMIT_EXCEEDED, message, options);\n  }\n}\n\nexport default BandwidthLimitExceededError;\n","import status from '../../status';\nimport ServerError from '../ServerError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass NotExtendedError extends ServerError {\n  constructor(message: string = status.codes[status.NOT_EXTENDED], options: ErrorOptions = { expose: false }) {\n    super(status.NOT_EXTENDED, message, options);\n  }\n}\n\nexport default NotExtendedError;\n","import status from '../../status';\nimport ServerError from '../ServerError';\nimport { ErrorOptions } from '../HTTPError';\n\nclass NetworkAuthenticationRequiredError extends ServerError {\n  constructor(\n    message: string = status.codes[status.NETWORK_AUTHENTICATION_REQUIRED],\n    options: ErrorOptions = { expose: false }\n  ) {\n    super(status.NETWORK_AUTHENTICATION_REQUIRED, message, options);\n  }\n}\n\nexport default NetworkAuthenticationRequiredError;\n","import status, { Status } from './status';\nimport * as errors from './errors';\nimport { ErrorOptions } from './errors/HTTPError';\n\nconst map = new Map();\n\nfor (const error in errors) {\n  const Err = (errors as any)[error];\n  const proto = Err.prototype;\n\n  if (proto instanceof errors.ClientError || proto instanceof errors.ServerError) {\n    const err = new Err();\n    map.set(err.code, Err);\n  }\n}\n\nconst teapot = {\n  ...errors,\n  status: status as Status,\n  error: (code: string | number, message?: string, options?: ErrorOptions): errors.HTTPError => {\n    if (!status.isError(code)) throw new Error(`Invalid status code ${code} - must be 4xx or 5xx`);\n\n    const ErrorClass = map.get(status.code(code));\n    return new ErrorClass(message, options);\n  },\n};\n\nexport default teapot;\n"],"names":["StatusType","Status","constructor","http","STATUS_CODES","map","statusCodes","obj","list","Object","keys","forEach","code","message","num","Number","parseInt","toLowerCase","toUpperCase","push","codes","input","Error","isNaN","isInfo","is","INFO","isSuccess","SUCCESS","isRedirect","REDIRECT","isClientError","CLIENTERROR","isServerError","SERVERERROR","isError","type","includes","toString","String","charAt","HTTPError","options","expose","name","captureStackTrace","status","data","ClientError","ServerError","BadRequestError","BAD_REQUEST","UnauthorizedError","UNAUTHORIZED","PaymentRequiredError","PAYMENT_REQUIRED","ForbiddenError","FORBIDDEN","NotFoundError","NOT_FOUND","MethodNotAllowedError","METHOD_NOT_ALLOWED","NotAcceptableError","NOT_ACCEPTABLE","ProxyAuthenticationRequiredError","PROXY_AUTHENTICATION_REQUIRED","RequestTimeoutError","REQUEST_TIMEOUT","ConflictError","CONFLICT","GoneError","GONE","LengthRequiredError","LENGTH_REQUIRED","PreconditionFailedError","PRECONDITION_FAILED","PayloadTooLargeError","PAYLOAD_TOO_LARGE","URITooLargeError","URI_TOO_LONG","UnsupportedMediaTypeError","UNSUPPORTED_MEDIA_TYPE","RangeNotSatisfiableError","RANGE_NOT_SATISFIABLE","ExpectationFailedError","EXPECTATION_FAILED","ImATeapotError","IM_A_TEAPOT","MisdirectedRequestError","MISDIRECTED_REQUEST","UnprocessableEntityError","UNPROCESSABLE_ENTITY","LockedError","LOCKED","FailedDependencyError","FAILED_DEPENDENCY","UnorderedCollectionError","UNORDERED_COLLECTION","UpgradeRequiredError","UPGRADE_REQUIRED","PreconditionRequiredError","PRECONDITION_REQUIRED","TooManyRequestsError","TOO_MANY_REQUESTS","RequestHeaderFieldsTooLargeError","REQUEST_HEADER_FIELDS_TOO_LARGE","UnavailableForLegalReasonsError","UNAVAILABLE_FOR_LEGAL_REASONS","InternalServerError","INTERNAL_SERVER_ERROR","NotImplementedError","NOT_IMPLEMENTED","BadGatewayError","BAD_GATEWAY","ServiceUnavailableError","SERVICE_UNAVAILABLE","GatewayTimeoutError","GATEWAY_TIMEOUT","HTTPVersionNotSupportedError","HTTP_VERSION_NOT_SUPPORTED","VariantAlsoNegotiatesError","VARIANT_ALSO_NEGOTIATES","InsufficientStorageError","INSUFFICIENT_STORAGE","LoopDetectedError","LOOP_DETECTED","BandwidthLimitExceededError","BANDWIDTH_LIMIT_EXCEEDED","NotExtendedError","NOT_EXTENDED","NetworkAuthenticationRequiredError","NETWORK_AUTHENTICATION_REQUIRED","const","Map","error","errors","Err","proto","prototype","err","set","teapot","ErrorClass","get"],"mappings":"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"}