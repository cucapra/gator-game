(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('http')) :
  typeof define === 'function' && define.amd ? define(['http'], factory) :
  (global.nodeTeapot = factory(global.http));
}(this, (function (http) {
  http = http && http.hasOwnProperty('default') ? http['default'] : http;

  var StatusType;

  (function (StatusType) {
    StatusType["INFO"] = "1";
    StatusType["SUCCESS"] = "2";
    StatusType["REDIRECT"] = "3";
    StatusType["CLIENTERROR"] = "4";
    StatusType["SERVERERROR"] = "5";
  })(StatusType || (StatusType = {}));

  var Status = function Status() {
    this.CONTINUE = 100;
    this.SWITCHING_PROTOCOLS = 101;
    this.PROCESSING = 102;
    this.EARLY_HINTS = 103;
    this.OK = 200;
    this.CREATED = 201;
    this.ACCEPTED = 202;
    this.NON_AUTHORITATIVE_INFORMATION = 203;
    this.NO_CONTENT = 204;
    this.RESET_CONTENT = 205;
    this.PARTIAL_CONTENT = 206;
    this.MULTI_STATUS = 207;
    this.ALREADY_REPORTED = 208;
    this.IM_USED = 226;
    this.MULTIPLE_CHOICES = 300;
    this.MOVED_PERMANENTLY = 301;
    this.FOUND = 302;
    this.SEE_OTHER = 303;
    this.NOT_MODIFIED = 304;
    this.USE_PROXY = 305;
    this.TEMPORARY_REDIRECT = 307;
    this.PERMANENT_REDIRECT = 308;
    this.BAD_REQUEST = 400;
    this.UNAUTHORIZED = 401;
    this.PAYMENT_REQUIRED = 402;
    this.FORBIDDEN = 403;
    this.NOT_FOUND = 404;
    this.METHOD_NOT_ALLOWED = 405;
    this.NOT_ACCEPTABLE = 406;
    this.PROXY_AUTHENTICATION_REQUIRED = 407;
    this.REQUEST_TIMEOUT = 408;
    this.CONFLICT = 409;
    this.GONE = 410;
    this.LENGTH_REQUIRED = 411;
    this.PRECONDITION_FAILED = 412;
    this.PAYLOAD_TOO_LARGE = 413;
    this.URI_TOO_LONG = 414;
    this.UNSUPPORTED_MEDIA_TYPE = 415;
    this.RANGE_NOT_SATISFIABLE = 416;
    this.EXPECTATION_FAILED = 417;
    this.IM_A_TEAPOT = 418;
    this.MISDIRECTED_REQUEST = 421;
    this.UNPROCESSABLE_ENTITY = 422;
    this.LOCKED = 423;
    this.FAILED_DEPENDENCY = 424;
    this.UNORDERED_COLLECTION = 425;
    this.UPGRADE_REQUIRED = 426;
    this.PRECONDITION_REQUIRED = 428;
    this.TOO_MANY_REQUESTS = 429;
    this.REQUEST_HEADER_FIELDS_TOO_LARGE = 431;
    this.UNAVAILABLE_FOR_LEGAL_REASONS = 451;
    this.INTERNAL_SERVER_ERROR = 500;
    this.NOT_IMPLEMENTED = 501;
    this.BAD_GATEWAY = 502;
    this.SERVICE_UNAVAILABLE = 503;
    this.GATEWAY_TIMEOUT = 504;
    this.HTTP_VERSION_NOT_SUPPORTED = 505;
    this.VARIANT_ALSO_NEGOTIATES = 506;
    this.INSUFFICIENT_STORAGE = 507;
    this.LOOP_DETECTED = 508;
    this.BANDWIDTH_LIMIT_EXCEEDED = 509;
    this.NOT_EXTENDED = 510;
    this.NETWORK_AUTHENTICATION_REQUIRED = 511;
    this.STATUS_CODES = http.STATUS_CODES;
    var map = {};

    this.statusCodes = (function (obj) {
      var list = [];
      Object.keys(http.STATUS_CODES).forEach(function (code) {
        var message = http.STATUS_CODES[code];
        var num = Number.parseInt(code);

        if (message) {
          obj[message] = num;
          obj[message.toLowerCase()] = num;
          obj[message.toUpperCase()] = num;
          obj[num] = message;
          obj[code] = message;
        }

        list.push(num);
      });
      return list;
    })(map);

    this.codes = map;
  };

  Status.prototype.code = function code (input) {
    if (typeof input === 'number') {
      if (this.codes[input]) { return input; }
      throw new Error(("Invalid status code " + input));
    } else if (typeof input === 'string') {
      if (isNaN(Number.parseInt(input))) {
        var code = this.codes[input.toLowerCase()];
        if (code) { return code; }
        throw new Error(("Invalid status message " + input));
      }

      return this.code(Number.parseInt(input));
    }

    throw new Error('Input must be a number or string');
  };

  Status.prototype.isInfo = function isInfo (input) {
    return this.is(StatusType.INFO, input);
  };

  Status.prototype.isSuccess = function isSuccess (input) {
    return this.is(StatusType.SUCCESS, input);
  };

  Status.prototype.isRedirect = function isRedirect (input) {
    return this.is(StatusType.REDIRECT, input);
  };

  Status.prototype.isClientError = function isClientError (input) {
    return this.is(StatusType.CLIENTERROR, input);
  };

  Status.prototype.isServerError = function isServerError (input) {
    return this.is(StatusType.SERVERERROR, input);
  };

  Status.prototype.isError = function isError (input) {
    return this.isClientError(input) || this.isServerError(input);
  };

  Status.prototype.is = function is (type, input) {
    return this.statusCodes.includes(Number.parseInt(input.toString())) && String(input).charAt(0) === type;
  };
  var status = new Status();

  var HTTPError = /*@__PURE__*/(function (Error) {
    function HTTPError(code, message, options) {
      if ( options === void 0 ) options = {
      expose: false
    };

      Error.call(this, message);
      this.reservedKeys = ['expose', 'status', 'statusCode', 'name', 'message'];
      this.name = this.constructor.name;

      if (typeof Error.captureStackTrace === 'function') {
        Error.captureStackTrace(this, this.constructor);
      }

      this.code = code;
      this.status = code;
      this.expose = options.expose;
      if (!status.isError(code)) { throw new Error(("Invalid status code " + code + " = must be 4xx or 5xx")); }
      if (options.data) { this.data = options.data; }
    }

    if ( Error ) HTTPError.__proto__ = Error;
    HTTPError.prototype = Object.create( Error && Error.prototype );
    HTTPError.prototype.constructor = HTTPError;

    return HTTPError;
  }(Error));

  var ClientError = /*@__PURE__*/(function (HTTPError$$1) {
    function ClientError(code, message, options) {
      if ( options === void 0 ) options = {
      expose: true
    };

      HTTPError$$1.call(this, code, message, options);
      if (!status.isClientError(code)) { throw new Error(("Invalid status code " + code + " - must be 4xx")); }
    }

    if ( HTTPError$$1 ) ClientError.__proto__ = HTTPError$$1;
    ClientError.prototype = Object.create( HTTPError$$1 && HTTPError$$1.prototype );
    ClientError.prototype.constructor = ClientError;

    return ClientError;
  }(HTTPError));

  var ServerError = /*@__PURE__*/(function (HTTPError$$1) {
    function ServerError(code, message, options) {
      HTTPError$$1.call(this, code, message, options);
      if (!status.isServerError(code)) { throw new Error(("Invalid status code " + code + " - must be 5xx")); }
    }

    if ( HTTPError$$1 ) ServerError.__proto__ = HTTPError$$1;
    ServerError.prototype = Object.create( HTTPError$$1 && HTTPError$$1.prototype );
    ServerError.prototype.constructor = ServerError;

    return ServerError;
  }(HTTPError));

  var BadRequestError = /*@__PURE__*/(function (ClientError$$1) {
    function BadRequestError(message, options) {
      if ( message === void 0 ) message = status.codes[status.BAD_REQUEST];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.BAD_REQUEST, message, options);
    }

    if ( ClientError$$1 ) BadRequestError.__proto__ = ClientError$$1;
    BadRequestError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    BadRequestError.prototype.constructor = BadRequestError;

    return BadRequestError;
  }(ClientError));

  var UnauthorizedError = /*@__PURE__*/(function (ClientError$$1) {
    function UnauthorizedError(message, options) {
      if ( message === void 0 ) message = status.codes[status.UNAUTHORIZED];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.UNAUTHORIZED, message, options);
    }

    if ( ClientError$$1 ) UnauthorizedError.__proto__ = ClientError$$1;
    UnauthorizedError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    UnauthorizedError.prototype.constructor = UnauthorizedError;

    return UnauthorizedError;
  }(ClientError));

  var PaymentRequiredError = /*@__PURE__*/(function (ClientError$$1) {
    function PaymentRequiredError(message, options) {
      if ( message === void 0 ) message = status.codes[status.PAYMENT_REQUIRED];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.PAYMENT_REQUIRED, message, options);
    }

    if ( ClientError$$1 ) PaymentRequiredError.__proto__ = ClientError$$1;
    PaymentRequiredError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    PaymentRequiredError.prototype.constructor = PaymentRequiredError;

    return PaymentRequiredError;
  }(ClientError));

  var ForbiddenError = /*@__PURE__*/(function (ClientError$$1) {
    function ForbiddenError(message, options) {
      if ( message === void 0 ) message = status.codes[status.FORBIDDEN];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.FORBIDDEN, message, options);
    }

    if ( ClientError$$1 ) ForbiddenError.__proto__ = ClientError$$1;
    ForbiddenError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    ForbiddenError.prototype.constructor = ForbiddenError;

    return ForbiddenError;
  }(ClientError));

  var NotFoundError = /*@__PURE__*/(function (ClientError$$1) {
    function NotFoundError(message, options) {
      if ( message === void 0 ) message = status.codes[status.NOT_FOUND];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.NOT_FOUND, message, options);
    }

    if ( ClientError$$1 ) NotFoundError.__proto__ = ClientError$$1;
    NotFoundError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    NotFoundError.prototype.constructor = NotFoundError;

    return NotFoundError;
  }(ClientError));

  var MethodNotAllowedError = /*@__PURE__*/(function (ClientError$$1) {
    function MethodNotAllowedError(message, options) {
      if ( message === void 0 ) message = status.codes[status.METHOD_NOT_ALLOWED];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.METHOD_NOT_ALLOWED, message, options);
    }

    if ( ClientError$$1 ) MethodNotAllowedError.__proto__ = ClientError$$1;
    MethodNotAllowedError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    MethodNotAllowedError.prototype.constructor = MethodNotAllowedError;

    return MethodNotAllowedError;
  }(ClientError));

  var NotAcceptableError = /*@__PURE__*/(function (ClientError$$1) {
    function NotAcceptableError(message, options) {
      if ( message === void 0 ) message = status.codes[status.NOT_ACCEPTABLE];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.NOT_ACCEPTABLE, message, options);
    }

    if ( ClientError$$1 ) NotAcceptableError.__proto__ = ClientError$$1;
    NotAcceptableError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    NotAcceptableError.prototype.constructor = NotAcceptableError;

    return NotAcceptableError;
  }(ClientError));

  var ProxyAuthenticationRequiredError = /*@__PURE__*/(function (ClientError$$1) {
    function ProxyAuthenticationRequiredError(message, options) {
      if ( message === void 0 ) message = status.codes[status.PROXY_AUTHENTICATION_REQUIRED];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.PROXY_AUTHENTICATION_REQUIRED, message, options);
    }

    if ( ClientError$$1 ) ProxyAuthenticationRequiredError.__proto__ = ClientError$$1;
    ProxyAuthenticationRequiredError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    ProxyAuthenticationRequiredError.prototype.constructor = ProxyAuthenticationRequiredError;

    return ProxyAuthenticationRequiredError;
  }(ClientError));

  var RequestTimeoutError = /*@__PURE__*/(function (ClientError$$1) {
    function RequestTimeoutError(message, options) {
      if ( message === void 0 ) message = status.codes[status.REQUEST_TIMEOUT];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.REQUEST_TIMEOUT, message, options);
    }

    if ( ClientError$$1 ) RequestTimeoutError.__proto__ = ClientError$$1;
    RequestTimeoutError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    RequestTimeoutError.prototype.constructor = RequestTimeoutError;

    return RequestTimeoutError;
  }(ClientError));

  var ConflictError = /*@__PURE__*/(function (ClientError$$1) {
    function ConflictError(message, options) {
      if ( message === void 0 ) message = status.codes[status.CONFLICT];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.CONFLICT, message, options);
    }

    if ( ClientError$$1 ) ConflictError.__proto__ = ClientError$$1;
    ConflictError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    ConflictError.prototype.constructor = ConflictError;

    return ConflictError;
  }(ClientError));

  var GoneError = /*@__PURE__*/(function (ClientError$$1) {
    function GoneError(message, options) {
      if ( message === void 0 ) message = status.codes[status.GONE];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.GONE, message, options);
    }

    if ( ClientError$$1 ) GoneError.__proto__ = ClientError$$1;
    GoneError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    GoneError.prototype.constructor = GoneError;

    return GoneError;
  }(ClientError));

  var LengthRequiredError = /*@__PURE__*/(function (ClientError$$1) {
    function LengthRequiredError(message, options) {
      if ( message === void 0 ) message = status.codes[status.LENGTH_REQUIRED];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.LENGTH_REQUIRED, message, options);
    }

    if ( ClientError$$1 ) LengthRequiredError.__proto__ = ClientError$$1;
    LengthRequiredError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    LengthRequiredError.prototype.constructor = LengthRequiredError;

    return LengthRequiredError;
  }(ClientError));

  var PreconditionFailedError = /*@__PURE__*/(function (ClientError$$1) {
    function PreconditionFailedError(message, options) {
      if ( message === void 0 ) message = status.codes[status.PRECONDITION_FAILED];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.PRECONDITION_FAILED, message, options);
    }

    if ( ClientError$$1 ) PreconditionFailedError.__proto__ = ClientError$$1;
    PreconditionFailedError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    PreconditionFailedError.prototype.constructor = PreconditionFailedError;

    return PreconditionFailedError;
  }(ClientError));

  var PayloadTooLargeError = /*@__PURE__*/(function (ClientError$$1) {
    function PayloadTooLargeError(message, options) {
      if ( message === void 0 ) message = status.codes[status.PAYLOAD_TOO_LARGE];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.PAYLOAD_TOO_LARGE, message, options);
    }

    if ( ClientError$$1 ) PayloadTooLargeError.__proto__ = ClientError$$1;
    PayloadTooLargeError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    PayloadTooLargeError.prototype.constructor = PayloadTooLargeError;

    return PayloadTooLargeError;
  }(ClientError));

  var URITooLargeError = /*@__PURE__*/(function (ClientError$$1) {
    function URITooLargeError(message, options) {
      if ( message === void 0 ) message = status.codes[status.URI_TOO_LONG];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.URI_TOO_LONG, message, options);
    }

    if ( ClientError$$1 ) URITooLargeError.__proto__ = ClientError$$1;
    URITooLargeError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    URITooLargeError.prototype.constructor = URITooLargeError;

    return URITooLargeError;
  }(ClientError));

  var UnsupportedMediaTypeError = /*@__PURE__*/(function (ClientError$$1) {
    function UnsupportedMediaTypeError(message, options) {
      if ( message === void 0 ) message = status.codes[status.UNSUPPORTED_MEDIA_TYPE];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.UNSUPPORTED_MEDIA_TYPE, message, options);
    }

    if ( ClientError$$1 ) UnsupportedMediaTypeError.__proto__ = ClientError$$1;
    UnsupportedMediaTypeError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    UnsupportedMediaTypeError.prototype.constructor = UnsupportedMediaTypeError;

    return UnsupportedMediaTypeError;
  }(ClientError));

  var RangeNotSatisfiableError = /*@__PURE__*/(function (ClientError$$1) {
    function RangeNotSatisfiableError(message, options) {
      if ( message === void 0 ) message = status.codes[status.RANGE_NOT_SATISFIABLE];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.RANGE_NOT_SATISFIABLE, message, options);
    }

    if ( ClientError$$1 ) RangeNotSatisfiableError.__proto__ = ClientError$$1;
    RangeNotSatisfiableError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    RangeNotSatisfiableError.prototype.constructor = RangeNotSatisfiableError;

    return RangeNotSatisfiableError;
  }(ClientError));

  var ExpectationFailedError = /*@__PURE__*/(function (ClientError$$1) {
    function ExpectationFailedError(message, options) {
      if ( message === void 0 ) message = status.codes[status.EXPECTATION_FAILED];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.EXPECTATION_FAILED, message, options);
    }

    if ( ClientError$$1 ) ExpectationFailedError.__proto__ = ClientError$$1;
    ExpectationFailedError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    ExpectationFailedError.prototype.constructor = ExpectationFailedError;

    return ExpectationFailedError;
  }(ClientError));

  var ImATeapotError = /*@__PURE__*/(function (ClientError$$1) {
    function ImATeapotError(message, options) {
      if ( message === void 0 ) message = status.codes[status.IM_A_TEAPOT];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.IM_A_TEAPOT, message, options);
    }

    if ( ClientError$$1 ) ImATeapotError.__proto__ = ClientError$$1;
    ImATeapotError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    ImATeapotError.prototype.constructor = ImATeapotError;

    return ImATeapotError;
  }(ClientError));

  var MisdirectedRequestError = /*@__PURE__*/(function (ClientError$$1) {
    function MisdirectedRequestError(message, options) {
      if ( message === void 0 ) message = status.codes[status.MISDIRECTED_REQUEST];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.MISDIRECTED_REQUEST, message, options);
    }

    if ( ClientError$$1 ) MisdirectedRequestError.__proto__ = ClientError$$1;
    MisdirectedRequestError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    MisdirectedRequestError.prototype.constructor = MisdirectedRequestError;

    return MisdirectedRequestError;
  }(ClientError));

  var UnprocessableEntityError = /*@__PURE__*/(function (ClientError$$1) {
    function UnprocessableEntityError(message, options) {
      if ( message === void 0 ) message = status.codes[status.UNPROCESSABLE_ENTITY];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.UNPROCESSABLE_ENTITY, message, options);
    }

    if ( ClientError$$1 ) UnprocessableEntityError.__proto__ = ClientError$$1;
    UnprocessableEntityError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    UnprocessableEntityError.prototype.constructor = UnprocessableEntityError;

    return UnprocessableEntityError;
  }(ClientError));

  var LockedError = /*@__PURE__*/(function (ClientError$$1) {
    function LockedError(message, options) {
      if ( message === void 0 ) message = status.codes[status.LOCKED];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.LOCKED, message, options);
    }

    if ( ClientError$$1 ) LockedError.__proto__ = ClientError$$1;
    LockedError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    LockedError.prototype.constructor = LockedError;

    return LockedError;
  }(ClientError));

  var FailedDependencyError = /*@__PURE__*/(function (ClientError$$1) {
    function FailedDependencyError(message, options) {
      if ( message === void 0 ) message = status.codes[status.FAILED_DEPENDENCY];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.FAILED_DEPENDENCY, message, options);
    }

    if ( ClientError$$1 ) FailedDependencyError.__proto__ = ClientError$$1;
    FailedDependencyError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    FailedDependencyError.prototype.constructor = FailedDependencyError;

    return FailedDependencyError;
  }(ClientError));

  var UnorderedCollectionError = /*@__PURE__*/(function (ClientError$$1) {
    function UnorderedCollectionError(message, options) {
      if ( message === void 0 ) message = status.codes[status.UNORDERED_COLLECTION];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.UNORDERED_COLLECTION, message, options);
    }

    if ( ClientError$$1 ) UnorderedCollectionError.__proto__ = ClientError$$1;
    UnorderedCollectionError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    UnorderedCollectionError.prototype.constructor = UnorderedCollectionError;

    return UnorderedCollectionError;
  }(ClientError));

  var UpgradeRequiredError = /*@__PURE__*/(function (ClientError$$1) {
    function UpgradeRequiredError(message, options) {
      if ( message === void 0 ) message = status.codes[status.UPGRADE_REQUIRED];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.UPGRADE_REQUIRED, message, options);
    }

    if ( ClientError$$1 ) UpgradeRequiredError.__proto__ = ClientError$$1;
    UpgradeRequiredError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    UpgradeRequiredError.prototype.constructor = UpgradeRequiredError;

    return UpgradeRequiredError;
  }(ClientError));

  var PreconditionRequiredError = /*@__PURE__*/(function (ClientError$$1) {
    function PreconditionRequiredError(message, options) {
      if ( message === void 0 ) message = status.codes[status.PRECONDITION_REQUIRED];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.PRECONDITION_REQUIRED, message, options);
    }

    if ( ClientError$$1 ) PreconditionRequiredError.__proto__ = ClientError$$1;
    PreconditionRequiredError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    PreconditionRequiredError.prototype.constructor = PreconditionRequiredError;

    return PreconditionRequiredError;
  }(ClientError));

  var TooManyRequestsError = /*@__PURE__*/(function (ClientError$$1) {
    function TooManyRequestsError(message, options) {
      if ( message === void 0 ) message = status.codes[status.TOO_MANY_REQUESTS];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.TOO_MANY_REQUESTS, message, options);
    }

    if ( ClientError$$1 ) TooManyRequestsError.__proto__ = ClientError$$1;
    TooManyRequestsError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    TooManyRequestsError.prototype.constructor = TooManyRequestsError;

    return TooManyRequestsError;
  }(ClientError));

  var RequestHeaderFieldsTooLargeError = /*@__PURE__*/(function (ClientError$$1) {
    function RequestHeaderFieldsTooLargeError(message, options) {
      if ( message === void 0 ) message = status.codes[status.REQUEST_HEADER_FIELDS_TOO_LARGE];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.REQUEST_HEADER_FIELDS_TOO_LARGE, message, options);
    }

    if ( ClientError$$1 ) RequestHeaderFieldsTooLargeError.__proto__ = ClientError$$1;
    RequestHeaderFieldsTooLargeError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    RequestHeaderFieldsTooLargeError.prototype.constructor = RequestHeaderFieldsTooLargeError;

    return RequestHeaderFieldsTooLargeError;
  }(ClientError));

  var UnavailableForLegalReasonsError = /*@__PURE__*/(function (ClientError$$1) {
    function UnavailableForLegalReasonsError(message, options) {
      if ( message === void 0 ) message = status.codes[status.UNAVAILABLE_FOR_LEGAL_REASONS];
      if ( options === void 0 ) options = {
      expose: true
    };

      ClientError$$1.call(this, status.UNAVAILABLE_FOR_LEGAL_REASONS, message, options);
    }

    if ( ClientError$$1 ) UnavailableForLegalReasonsError.__proto__ = ClientError$$1;
    UnavailableForLegalReasonsError.prototype = Object.create( ClientError$$1 && ClientError$$1.prototype );
    UnavailableForLegalReasonsError.prototype.constructor = UnavailableForLegalReasonsError;

    return UnavailableForLegalReasonsError;
  }(ClientError));

  var InternalServerError = /*@__PURE__*/(function (ServerError$$1) {
    function InternalServerError(message, options) {
      if ( message === void 0 ) message = status.codes[status.INTERNAL_SERVER_ERROR];
      if ( options === void 0 ) options = {
      expose: false
    };

      ServerError$$1.call(this, status.INTERNAL_SERVER_ERROR, message, options);
    }

    if ( ServerError$$1 ) InternalServerError.__proto__ = ServerError$$1;
    InternalServerError.prototype = Object.create( ServerError$$1 && ServerError$$1.prototype );
    InternalServerError.prototype.constructor = InternalServerError;

    return InternalServerError;
  }(ServerError));

  var NotImplementedError = /*@__PURE__*/(function (ServerError$$1) {
    function NotImplementedError(message, options) {
      if ( message === void 0 ) message = status.codes[status.NOT_IMPLEMENTED];
      if ( options === void 0 ) options = {
      expose: false
    };

      ServerError$$1.call(this, status.NOT_IMPLEMENTED, message, options);
    }

    if ( ServerError$$1 ) NotImplementedError.__proto__ = ServerError$$1;
    NotImplementedError.prototype = Object.create( ServerError$$1 && ServerError$$1.prototype );
    NotImplementedError.prototype.constructor = NotImplementedError;

    return NotImplementedError;
  }(ServerError));

  var BadGatewayError = /*@__PURE__*/(function (ServerError$$1) {
    function BadGatewayError(message, options) {
      if ( message === void 0 ) message = status.codes[status.BAD_GATEWAY];
      if ( options === void 0 ) options = {
      expose: false
    };

      ServerError$$1.call(this, status.BAD_GATEWAY, message, options);
    }

    if ( ServerError$$1 ) BadGatewayError.__proto__ = ServerError$$1;
    BadGatewayError.prototype = Object.create( ServerError$$1 && ServerError$$1.prototype );
    BadGatewayError.prototype.constructor = BadGatewayError;

    return BadGatewayError;
  }(ServerError));

  var ServiceUnavailableError = /*@__PURE__*/(function (ServerError$$1) {
    function ServiceUnavailableError(message, options) {
      if ( message === void 0 ) message = status.codes[status.SERVICE_UNAVAILABLE];
      if ( options === void 0 ) options = {
      expose: false
    };

      ServerError$$1.call(this, status.SERVICE_UNAVAILABLE, message, options);
    }

    if ( ServerError$$1 ) ServiceUnavailableError.__proto__ = ServerError$$1;
    ServiceUnavailableError.prototype = Object.create( ServerError$$1 && ServerError$$1.prototype );
    ServiceUnavailableError.prototype.constructor = ServiceUnavailableError;

    return ServiceUnavailableError;
  }(ServerError));

  var GatewayTimeoutError = /*@__PURE__*/(function (ServerError$$1) {
    function GatewayTimeoutError(message, options) {
      if ( message === void 0 ) message = status.codes[status.GATEWAY_TIMEOUT];
      if ( options === void 0 ) options = {
      expose: false
    };

      ServerError$$1.call(this, status.GATEWAY_TIMEOUT, message, options);
    }

    if ( ServerError$$1 ) GatewayTimeoutError.__proto__ = ServerError$$1;
    GatewayTimeoutError.prototype = Object.create( ServerError$$1 && ServerError$$1.prototype );
    GatewayTimeoutError.prototype.constructor = GatewayTimeoutError;

    return GatewayTimeoutError;
  }(ServerError));

  var HTTPVersionNotSupportedError = /*@__PURE__*/(function (ServerError$$1) {
    function HTTPVersionNotSupportedError(message, options) {
      if ( message === void 0 ) message = status.codes[status.HTTP_VERSION_NOT_SUPPORTED];
      if ( options === void 0 ) options = {
      expose: false
    };

      ServerError$$1.call(this, status.HTTP_VERSION_NOT_SUPPORTED, message, options);
    }

    if ( ServerError$$1 ) HTTPVersionNotSupportedError.__proto__ = ServerError$$1;
    HTTPVersionNotSupportedError.prototype = Object.create( ServerError$$1 && ServerError$$1.prototype );
    HTTPVersionNotSupportedError.prototype.constructor = HTTPVersionNotSupportedError;

    return HTTPVersionNotSupportedError;
  }(ServerError));

  var VariantAlsoNegotiatesError = /*@__PURE__*/(function (ServerError$$1) {
    function VariantAlsoNegotiatesError(message, options) {
      if ( message === void 0 ) message = status.codes[status.VARIANT_ALSO_NEGOTIATES];
      if ( options === void 0 ) options = {
      expose: false
    };

      ServerError$$1.call(this, status.VARIANT_ALSO_NEGOTIATES, message, options);
    }

    if ( ServerError$$1 ) VariantAlsoNegotiatesError.__proto__ = ServerError$$1;
    VariantAlsoNegotiatesError.prototype = Object.create( ServerError$$1 && ServerError$$1.prototype );
    VariantAlsoNegotiatesError.prototype.constructor = VariantAlsoNegotiatesError;

    return VariantAlsoNegotiatesError;
  }(ServerError));

  var InsufficientStorageError = /*@__PURE__*/(function (ServerError$$1) {
    function InsufficientStorageError(message, options) {
      if ( message === void 0 ) message = status.codes[status.INSUFFICIENT_STORAGE];
      if ( options === void 0 ) options = {
      expose: false
    };

      ServerError$$1.call(this, status.INSUFFICIENT_STORAGE, message, options);
    }

    if ( ServerError$$1 ) InsufficientStorageError.__proto__ = ServerError$$1;
    InsufficientStorageError.prototype = Object.create( ServerError$$1 && ServerError$$1.prototype );
    InsufficientStorageError.prototype.constructor = InsufficientStorageError;

    return InsufficientStorageError;
  }(ServerError));

  var LoopDetectedError = /*@__PURE__*/(function (ServerError$$1) {
    function LoopDetectedError(message, options) {
      if ( message === void 0 ) message = status.codes[status.LOOP_DETECTED];
      if ( options === void 0 ) options = {
      expose: false
    };

      ServerError$$1.call(this, status.LOOP_DETECTED, message, options);
    }

    if ( ServerError$$1 ) LoopDetectedError.__proto__ = ServerError$$1;
    LoopDetectedError.prototype = Object.create( ServerError$$1 && ServerError$$1.prototype );
    LoopDetectedError.prototype.constructor = LoopDetectedError;

    return LoopDetectedError;
  }(ServerError));

  var BandwidthLimitExceededError = /*@__PURE__*/(function (ServerError$$1) {
    function BandwidthLimitExceededError(message, options) {
      if ( message === void 0 ) message = status.codes[status.BANDWIDTH_LIMIT_EXCEEDED];
      if ( options === void 0 ) options = {
      expose: false
    };

      ServerError$$1.call(this, status.BANDWIDTH_LIMIT_EXCEEDED, message, options);
    }

    if ( ServerError$$1 ) BandwidthLimitExceededError.__proto__ = ServerError$$1;
    BandwidthLimitExceededError.prototype = Object.create( ServerError$$1 && ServerError$$1.prototype );
    BandwidthLimitExceededError.prototype.constructor = BandwidthLimitExceededError;

    return BandwidthLimitExceededError;
  }(ServerError));

  var NotExtendedError = /*@__PURE__*/(function (ServerError$$1) {
    function NotExtendedError(message, options) {
      if ( message === void 0 ) message = status.codes[status.NOT_EXTENDED];
      if ( options === void 0 ) options = {
      expose: false
    };

      ServerError$$1.call(this, status.NOT_EXTENDED, message, options);
    }

    if ( ServerError$$1 ) NotExtendedError.__proto__ = ServerError$$1;
    NotExtendedError.prototype = Object.create( ServerError$$1 && ServerError$$1.prototype );
    NotExtendedError.prototype.constructor = NotExtendedError;

    return NotExtendedError;
  }(ServerError));

  var NetworkAuthenticationRequiredError = /*@__PURE__*/(function (ServerError$$1) {
    function NetworkAuthenticationRequiredError(message, options) {
      if ( message === void 0 ) message = status.codes[status.NETWORK_AUTHENTICATION_REQUIRED];
      if ( options === void 0 ) options = {
      expose: false
    };

      ServerError$$1.call(this, status.NETWORK_AUTHENTICATION_REQUIRED, message, options);
    }

    if ( ServerError$$1 ) NetworkAuthenticationRequiredError.__proto__ = ServerError$$1;
    NetworkAuthenticationRequiredError.prototype = Object.create( ServerError$$1 && ServerError$$1.prototype );
    NetworkAuthenticationRequiredError.prototype.constructor = NetworkAuthenticationRequiredError;

    return NetworkAuthenticationRequiredError;
  }(ServerError));



  var errors = ({
    HTTPError: HTTPError,
    ClientError: ClientError,
    ServerError: ServerError,
    BadRequestError: BadRequestError,
    UnauthorizedError: UnauthorizedError,
    PaymentRequiredError: PaymentRequiredError,
    ForbiddenError: ForbiddenError,
    NotFoundError: NotFoundError,
    MethodNotAllowedError: MethodNotAllowedError,
    NotAcceptableError: NotAcceptableError,
    ProxyAuthenticationRequiredError: ProxyAuthenticationRequiredError,
    RequestTimeoutError: RequestTimeoutError,
    ConflictError: ConflictError,
    GoneError: GoneError,
    LengthRequiredError: LengthRequiredError,
    PreconditionFailedError: PreconditionFailedError,
    PayloadTooLargeError: PayloadTooLargeError,
    URITooLongError: URITooLargeError,
    UnsupportedMediaTypeError: UnsupportedMediaTypeError,
    RangeNotSatisfiableError: RangeNotSatisfiableError,
    ExpectationFailedError: ExpectationFailedError,
    ImATeapotError: ImATeapotError,
    MisdirectedRequestError: MisdirectedRequestError,
    UnprocessableEntityError: UnprocessableEntityError,
    LockedError: LockedError,
    FailedDependencyError: FailedDependencyError,
    UnorderedCollectionError: UnorderedCollectionError,
    UpgradeRequiredError: UpgradeRequiredError,
    PreconditionRequiredError: PreconditionRequiredError,
    TooManyRequestsError: TooManyRequestsError,
    RequestHeaderFieldsTooLargeError: RequestHeaderFieldsTooLargeError,
    UnavailableForLegalReasonsError: UnavailableForLegalReasonsError,
    InternalServerError: InternalServerError,
    NotImplementedError: NotImplementedError,
    BadGatewayError: BadGatewayError,
    ServiceUnavailableError: ServiceUnavailableError,
    GatewayTimeoutError: GatewayTimeoutError,
    HTTPVersionNotSupportedError: HTTPVersionNotSupportedError,
    VariantAlsoNegotiatesError: VariantAlsoNegotiatesError,
    InsufficientStorageError: InsufficientStorageError,
    LoopDetectedError: LoopDetectedError,
    BandwidthLimitExceededError: BandwidthLimitExceededError,
    NotExtendedError: NotExtendedError,
    NetworkAuthenticationRequiredError: NetworkAuthenticationRequiredError
  });

  var map = new Map();

  for (var error in errors) {
    var Err = errors[error];
    var proto = Err.prototype;

    if (proto instanceof ClientError || proto instanceof ServerError) {
      var err = new Err();
      map.set(err.code, Err);
    }
  }

  var teapot = Object.assign({}, errors,
    {status: status,
    error: function (code, message, options) {
      if (!status.isError(code)) { throw new Error(("Invalid status code " + code + " - must be 4xx or 5xx")); }
      var ErrorClass = map.get(status.code(code));
      return new ErrorClass(message, options);
    }});

  return teapot;

})));
//# sourceMappingURL=index.umd.js.map
