export declare type StatusCode = string | number;
export interface StatusCodeMap {
    [key: number]: string;
    [key: string]: StatusCode;
}
export declare class Status {
    CONTINUE: number;
    SWITCHING_PROTOCOLS: number;
    PROCESSING: number;
    EARLY_HINTS: number;
    OK: number;
    CREATED: number;
    ACCEPTED: number;
    NON_AUTHORITATIVE_INFORMATION: number;
    NO_CONTENT: number;
    RESET_CONTENT: number;
    PARTIAL_CONTENT: number;
    MULTI_STATUS: number;
    ALREADY_REPORTED: number;
    IM_USED: number;
    MULTIPLE_CHOICES: number;
    MOVED_PERMANENTLY: number;
    FOUND: number;
    SEE_OTHER: number;
    NOT_MODIFIED: number;
    USE_PROXY: number;
    TEMPORARY_REDIRECT: number;
    PERMANENT_REDIRECT: number;
    BAD_REQUEST: number;
    UNAUTHORIZED: number;
    PAYMENT_REQUIRED: number;
    FORBIDDEN: number;
    NOT_FOUND: number;
    METHOD_NOT_ALLOWED: number;
    NOT_ACCEPTABLE: number;
    PROXY_AUTHENTICATION_REQUIRED: number;
    REQUEST_TIMEOUT: number;
    CONFLICT: number;
    GONE: number;
    LENGTH_REQUIRED: number;
    PRECONDITION_FAILED: number;
    PAYLOAD_TOO_LARGE: number;
    URI_TOO_LONG: number;
    UNSUPPORTED_MEDIA_TYPE: number;
    RANGE_NOT_SATISFIABLE: number;
    EXPECTATION_FAILED: number;
    IM_A_TEAPOT: number;
    MISDIRECTED_REQUEST: number;
    UNPROCESSABLE_ENTITY: number;
    LOCKED: number;
    FAILED_DEPENDENCY: number;
    UNORDERED_COLLECTION: number;
    UPGRADE_REQUIRED: number;
    PRECONDITION_REQUIRED: number;
    TOO_MANY_REQUESTS: number;
    REQUEST_HEADER_FIELDS_TOO_LARGE: number;
    UNAVAILABLE_FOR_LEGAL_REASONS: number;
    INTERNAL_SERVER_ERROR: number;
    NOT_IMPLEMENTED: number;
    BAD_GATEWAY: number;
    SERVICE_UNAVAILABLE: number;
    GATEWAY_TIMEOUT: number;
    HTTP_VERSION_NOT_SUPPORTED: number;
    VARIANT_ALSO_NEGOTIATES: number;
    INSUFFICIENT_STORAGE: number;
    LOOP_DETECTED: number;
    BANDWIDTH_LIMIT_EXCEEDED: number;
    NOT_EXTENDED: number;
    NETWORK_AUTHENTICATION_REQUIRED: number;
    STATUS_CODES: {
        [errorCode: string]: string | undefined;
        [errorCode: number]: string | undefined;
    };
    codes: StatusCodeMap;
    statusCodes: number[];
    constructor();
    code(input: StatusCode): StatusCode;
    isInfo(input: StatusCode): boolean;
    isSuccess(input: StatusCode): boolean;
    isRedirect(input: StatusCode): boolean;
    isClientError(input: StatusCode): boolean;
    isServerError(input: StatusCode): boolean;
    isError(input: StatusCode): boolean;
    private is;
}
declare const _default: Status;
export default _default;
