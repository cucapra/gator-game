import { Status } from './status';
import * as errors from './errors';
import { ErrorOptions } from './errors/HTTPError';
declare const teapot: {
    status: Status;
    error: (code: string | number, message?: string | undefined, options?: ErrorOptions | undefined) => errors.HTTPError;
    HTTPError: typeof errors.HTTPError;
    ClientError: typeof errors.ClientError;
    ServerError: typeof errors.ServerError;
    BadRequestError: typeof errors.BadRequestError;
    UnauthorizedError: typeof errors.UnauthorizedError;
    PaymentRequiredError: typeof errors.PaymentRequiredError;
    ForbiddenError: typeof errors.ForbiddenError;
    NotFoundError: typeof errors.NotFoundError;
    MethodNotAllowedError: typeof errors.MethodNotAllowedError;
    NotAcceptableError: typeof errors.NotAcceptableError;
    ProxyAuthenticationRequiredError: typeof errors.ProxyAuthenticationRequiredError;
    RequestTimeoutError: typeof errors.RequestTimeoutError;
    ConflictError: typeof errors.ConflictError;
    GoneError: typeof errors.GoneError;
    LengthRequiredError: typeof errors.LengthRequiredError;
    PreconditionFailedError: typeof errors.PreconditionFailedError;
    PayloadTooLargeError: typeof errors.PayloadTooLargeError;
    URITooLongError: typeof errors.URITooLongError;
    UnsupportedMediaTypeError: typeof errors.UnsupportedMediaTypeError;
    RangeNotSatisfiableError: typeof errors.RangeNotSatisfiableError;
    ExpectationFailedError: typeof errors.ExpectationFailedError;
    ImATeapotError: typeof errors.ImATeapotError;
    MisdirectedRequestError: typeof errors.MisdirectedRequestError;
    UnprocessableEntityError: typeof errors.UnprocessableEntityError;
    LockedError: typeof errors.LockedError;
    FailedDependencyError: typeof errors.FailedDependencyError;
    UnorderedCollectionError: typeof errors.UnorderedCollectionError;
    UpgradeRequiredError: typeof errors.UpgradeRequiredError;
    PreconditionRequiredError: typeof errors.PreconditionRequiredError;
    TooManyRequestsError: typeof errors.TooManyRequestsError;
    RequestHeaderFieldsTooLargeError: typeof errors.RequestHeaderFieldsTooLargeError;
    UnavailableForLegalReasonsError: typeof errors.UnavailableForLegalReasonsError;
    InternalServerError: typeof errors.InternalServerError;
    NotImplementedError: typeof errors.NotImplementedError;
    BadGatewayError: typeof errors.BadGatewayError;
    ServiceUnavailableError: typeof errors.ServiceUnavailableError;
    GatewayTimeoutError: typeof errors.GatewayTimeoutError;
    HTTPVersionNotSupportedError: typeof errors.HTTPVersionNotSupportedError;
    VariantAlsoNegotiatesError: typeof errors.VariantAlsoNegotiatesError;
    InsufficientStorageError: typeof errors.InsufficientStorageError;
    LoopDetectedError: typeof errors.LoopDetectedError;
    BandwidthLimitExceededError: typeof errors.BandwidthLimitExceededError;
    NotExtendedError: typeof errors.NotExtendedError;
    NetworkAuthenticationRequiredError: typeof errors.NetworkAuthenticationRequiredError;
};
export default teapot;
